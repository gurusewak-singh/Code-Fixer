[{"filename": "Social Media/backend/.env", "content": "PORT=5000\nMONGO_URL=mongodb+srv://guruopgsb:6wviB4ARdDLYuMd3@cluster.ah2kul8.mongodb.net/?retryWrites=true&w=majority&appName=Cluster\nJWT_SECRET=your_secret_key", "action": "unchanged"}, {"filename": "Social Media/backend/config/cors.js", "content": "const cors = require('cors');\n\nconst corsOptions = {\n  origin: \"http://localhost:5173\",\n  credentials: true,\n};\n\nmodule.exports = cors(corsOptions);", "action": "unchanged"}, {"filename": "Social Media/backend/controllers/authController.js", "content": "const User = require('../models/user');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\nexports.register = async (req, res)=>{\n  try{\n  const {username, email, password} = req.body\n\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n\n  const newUser = new User({\n    username, email, password : hashedPassword\n  })\n  await newUser.save();\n  console.log(\"REGISTER HIT\");\n  res.status(201).json({message: \"User created successfully\"})\n}catch(err){\n  res.status(500).json({message: err.message})\n}\n}\n\nexports.login = async (req, res)=>{\ntry{ \n  const { emailOrUsername = \"\", password } = req.body;\n\n\n  let user;\n   if(emailOrUsername.includes('@')){\n    user = await User.findOne({email: emailOrUsername})\n   }\n   else{\n    user = await User.findOne({username: emailOrUsername})\n   }\n   if(!user){\n    return res.status(404).json({message: \"User not found\"})\n   }\n\n   const isMatch = await bcrypt.compare(password, user.password)\n   if(!isMatch){\n    return res.status(400).json({message: \"Invalid credentials\"})\n   }  \n   console.log(\"LOGIN HIT\");\n   const token = jwt.sign({id: user._id, username: user.username}, process.env.JWT_SECRET, {expiresIn: '7d'});\n   res.json({token, user});\n}catch(err){\n  res.status(500).json({message: err.message})\n}\n}", "action": "modified"}, {"filename": "Social Media/backend/controllers/friendController.js", "content": "const User = require('../models/user');\nconst { getSocketId } = require('../socketManager');\n\nexports.sendFriendRequest = async (req, res)=>{\n  try{\n    const senderId = req.user.id;\n    const receiverId = req.params.id;\n\n    if(senderId === receiverId){\n      return res.status(400).json({message: \"You cannot send a friend request to yourself\"})\n    }\n\n    const receiver = await User.findById(receiverId)\n    const sender = await User.findById(senderId)\n\n    if(!receiver){\n      return res.status(404).json({message: \"Receiver not found\"})\n    }\n    if(receiver.friendRequests.includes(senderId) || sender.friends.includes(receiverId)){\n      return res.status(400).json({message: \"Friend request already sent or you are already friends\"})\n    }\n    \n\n    receiver.friendRequests.push(senderId)\n    await receiver.save()\n\n    res.status(200).json({message: \"Friend request sent successfully\"})\n    const receiverSocket = getSocketId(receiverId)\n    if (receiverSocket) {\n      io.to(receiverSocket).emit(\"friend-request-received\", {\n        from: senderId,\n        message: \"You have a new friend request\"\n      });\n    }\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.acceptFriendRequest = async (req, res)=>{\n  try{\n    const receiverId = req.user.id;\n    const senderId = req.params.id;\n\n    const receiver = await User.findById(receiverId);\n    const sender = await User.findById(senderId)\n\n    if (!receiver.friendRequests.includes(senderId)) {\n      return res.status(400).json({ message: \"No friend request from this user\" });\n    }\n    \n\n    receiver.friendRequests = receiver.friendRequests.filter(id => id.toString() !== senderId)\n    receiver.friends.push(senderId);\n\n    sender.friends.push(receiverId)\n\n    await receiver.save()\n    await sender.save()\n\n    res.status(200).json({message: \"Friend request accepted successfully\"})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\n\nexports.rejectFriendRequest = async (req, res)=>{\n  try{\n    const receiverId = req.user.id\n    const senderId = req.params.id\n\n    const receiver = await User.findById(receiverId)\n\n    if(!receiver.friendRequests.includes(senderId)){\n      return res.status(400).json({message: \"No friend request from this user\"})\n    }\n\n    receiver.friendRequests = receiver.friendRequests.filter(id => id.toString() !== senderId)\n\n    await receiver.save()\n    res.status(200).json({message: \"Friend request rejected successfully\"})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getFriendRequests = async (req, res)=>{\n  try{\n    const user = await User.findById(req.user.id).populate('friendRequests', 'username email')\n    if(!user){\n      return res.status(404).json({message: \"User not found\"})\n    }\n    res.status(200).json(user.friendRequests)\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getFriendList = async (req, res)=>{\n  try{\n    const user = await User.findById(req.user.id).populate('friends', 'username email')\n    if(!user){\n      return res.status(404).json({message: \"User not found\"})\n    }\n    res.status(200).json(user.friends)\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}", "action": "modified"}, {"filename": "Social Media/backend/controllers/notificationController.js", "content": "const Notification = require('../models/notification');\n\nexports.getNotifications = async (req, res) => {\n  try {\n    const notifications = await Notification.find({ recipient: req.user.id })\n      .sort({ createdAt: -1 })\n      .populate('sender', 'username')\n      .populate('post', 'textContent');\n    res.status(200).json(notifications);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.markAsRead = async (req, res) => {\n  try {\n    await Notification.findByIdAndUpdate(req.params.id, { read: true });\n    res.status(200).json({ message: 'Marked as read' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};", "action": "unchanged"}, {"filename": "Social Media/backend/controllers/postController.js", "content": "const Post = require('../models/post');\n\nexports.createPost = async (req, res)=>{\n  try{\n    const {textContent, image} = req.body;\n    \n    const newPost = new Post({\n      userId : req.user.id,\n      textContent,\n      image,\n      likes:[], \n      comments:[],\n      timestamp: new Date()\n    })\n\n    await newPost.save();\n    res.status(201).json({message: \"Post created successfully\", post: newPost})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getAllPosts = async(req, res)=>{\n\n  try{\n    const posts = await Post.find().populate(\"userId\", \"username profilePic\").sort({timestamp: -1});\n    res.status(200).json(posts);\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\n\nexports.getPostById = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Validate MongoDB ObjectId (optional but good practice)\n    if (!id.match(/^[0-9a-fA-F]{24}$/)) {\n      return res.status(400).json({ message: \"Invalid post ID format\" });\n    }\n\n    const post = await Post.findById(id).populate(\"userId\", \"username profilePic\"); // optional: include user info\n\n    if (!post) {\n      return res.status(404).json({ message: \"Post not found\" });\n    }\n\n    res.status(200).json(post);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\n\nexports.deletePost = async(req, res)=>{\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    if(post.userId.toString() !== req.user.id){\n      return res.status(403).json({message: \"You are not allowed to delete this post\"})\n    }\n    await post.deleteOne();\n    res.status(200).json({message: \"Post deleted successfully\"})\n    }catch(err){\n      res.status(500).json({message: err.message})\n    }\n}\n\nexports.toggleLikePost = async(req, res)=>{\n  const createNotification = require('../utils/createNotification');\n  const { getSocketId } = require('../socketManager');\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    if(post.likes.includes(req.user.id)){\n      post.likes = post.likes.filter(id => id.toString() !== req.user.id)\n      await post.save()\n      return res.status(200).json({message: \"Post unliked\", post})\n    }\n    else{\n      post.likes.push(req.user.id);\n      await post.save();\n      await createNotification({\n        recipient: post.userId,\n        sender: req.user.id,\n        type: 'like',\n        post: post._id,\n        message: `${req.user.username} liked your post`,\n      });\n      const postOwnerSocket = getSocketId(post.userId.toString());\n      if (postOwnerSocket && req.user.id !== post.userId.toString()) {\n        io.to(postOwnerSocket).emit(\"post-liked\", {\n          from: req.user.id,\n          postId: post._id,\n          message: \"Someone liked your post\"\n        });\n      }\n      return res.status(200).json({message: \"Post liked\", post})\n     \n    }\n\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.addComment = async(req, res)=>{\n  const createNotification = require('../utils/createNotification');\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    const newComment = {\n      userId: req.user.id,\n      text: req.body.text,\n      timestamp: new Date()\n    }\n    post.comments.push(newComment)\n    await post.save()\n\n    await createNotification({\n      recipient: post.userId,\n      sender: req.user.id,\n      type: 'comment',\n      post: post._id,\n      message: `${req.user.username} commented on your post`,\n    });\n    res.status(200).json({message: \"Comment added\", post})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}", "action": "modified"}, {"filename": "Social Media/backend/controllers/userController.js", "content": "const User = require('../models/user');\n\n// Search users by username or email\nexports.searchUsers = async (req, res) => {\n  const query = req.query.q;\n  if (!query) {\n    return res.status(400).json({ message: \"Search query is required\" });\n  }\n\n  try {\n    const users = await User.find({\n      $or: [\n        { username: { $regex: query, $options: \"i\" } },\n        { email: { $regex: query, $options: \"i\" } }\n      ]\n    }).select(\"username email profilePic\");\n\n    res.status(200).json(users);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\n// Get a specific user's public profile\nexports.getUserProfile = async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id).select(\"-password\");\n    if (!user) return res.status(404).json({ message: \"User not found\" });\n\n    res.status(200).json(user);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\n// Edit your own profile\nexports.editProfile = async (req, res) => {\n  try {\n    const updated = await User.findByIdAndUpdate(\n      req.user.id,\n      {\n        $set: {\n          username: req.body.username,\n          email: req.body.email,\n          profilePic: req.body.profilePic\n        }\n      },\n      { new: true }\n    ).select(\"-password\");\n\n    res.status(200).json({ message: \"Profile updated\", user: updated });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};", "action": "modified"}, {"filename": "Social Media/backend/middlewares/authMiddleware.js", "content": "const jwt = require('jsonwebtoken');\n\nexports.verifyToken = (req, res, next)=>{\n  const token = req.headers.authorization?.split(' ')[1];\n\n  if(!token){\n    return res.status(401).json({message: \"Access Denied No token provided\"});\n  }\n  try{\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded\n    next();\n  }catch(err){\n    return res.status(400).json({message: \"Invalid token\"});\n  }\n}", "action": "unchanged"}, {"filename": "Social Media/backend/models/notification.js", "content": "const mongoose = require('mongoose');\n\nconst notificationSchema = new mongoose.Schema({\n  recipient: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  sender: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  type: { type: String, enum: ['like', 'comment', 'friend_request'], required: true },\n  post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post' },\n  message: { type: String },\n  read: { type: Boolean, default: false },\n  createdAt: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Notification', notificationSchema);", "action": "unchanged"}, {"filename": "Social Media/backend/models/post.js", "content": "const mongoose = require('mongoose');\n\nconst postSchema = new mongoose.Schema({\n  userId:{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  textContent:{\n    type: String,\n    maxlength: 100\n  },\n  image:{\n    type: String,\n    default: \"\",\n  },\n  likes: [{\n    type: mongoose.Schema.Types.ObjectId,\n     ref: 'User'}],\n     comments: [\n      {\n          userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n          text: { type: String },\n          timestamp: { type: Date, default: Date.now }\n      }\n  ]\n},{\n  timestamps: true\n})\n\nmodule.exports = mongoose.model('Post', postSchema)", "action": "unchanged"}, {"filename": "Social Media/backend/models/user.js", "content": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username:{\n    type: String,\n    required: true,\n    unique: true,\n    maxlength:15,\n    minlength: 5\n  },\n  email:{\n    type: String,\n    required: true,\n    unique: true\n  },\n  password:{\n    type: String,\n    required: true,\n    minlength: 8\n  },\n  profilePic:{\n    type: String,\n    default: \"\"\n  },\n  bio:{\n    type: String,\n    default: \"\",\n    maxlength: 100\n  },\n  friends: [{type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n  friendRequests: [{type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n},{\ntimestamps: true\n})\n\nmodule.exports = mongoose.model('user', userSchema);", "action": "unchanged"}, {"filename": "Social Media/backend/package-lock.json", "content": "<ORIGINAL_CONTENT_UNMODIFIED_PLACEHOLDER>", "action": "unchanged"}, {"filename": "Social Media/backend/package.json", "content": "{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon server.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\",\n  \"dependencies\": {\n    \"bcrypt\": \"^5.1.1\",\n    \"bcryptjs\": \"^3.0.2\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.5.0\",\n    \"express\": \"^5.1.0\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongodb\": \"^6.16.0\",\n    \"mongoose\": \"^8.14.0\",\n    \"socket.io\": \"^4.8.1\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.1.10\"\n  }\n}", "action": "unchanged"}, {"filename": "Social Media/backend/routes/authRoutes.js", "content": "const express = require('express');\nconst {register, login} = require('../controllers/authController')\n\nconst router = express.Router();\n\nrouter.post('/register', register)\nrouter.post('/login', login)\n\nmodule.exports = router;", "action": "unchanged"}, {"filename": "Social Media/backend/routes/friendRoutes.js", "content": "const express = require('express');\nconst router = express.Router();\nconst friendController = require('../controllers/friendController');\nconst { verifyToken } = require('../middlewares/authMiddleware');\n\nrouter.post('/friend-request/:id', verifyToken, friendController.sendFriendRequest)\n\nrouter.post('/friend-request/:id/accept', verifyToken, friendController.acceptFriendRequest)\n\nrouter.post('/friend-request/:id/reject', verifyToken, friendController.rejectFriendRequest)\n\nrouter.get('/friend-requests', verifyToken, friendController.getFriendRequests)\n\nrouter.get('/friends', verifyToken, friendController.getFriendList)\n\nmodule.exports = router;", "action": "modified"}, {"filename": "Social Media/backend/routes/notificationRoutes.js", "content": "const express = require('express');\nconst router = express.Router();\nconst { verifyToken } = require('../middlewares/authMiddleware');\nconst notificationController = require('../controllers/notificationController');\n\nrouter.get('/', verifyToken, notificationController.getNotifications);\nrouter.put('/:id/read', verifyToken, notificationController.markAsRead);\n\nmodule.exports = router;", "action": "unchanged"}, {"filename": "Social Media/backend/routes/postRoutes.js", "content": "const express = require('express');\nconst router = express.Router();\nconst postController = require('../controllers/postController');\nconst { verifyToken }  = require('../middlewares/authMiddleware');\n\nrouter.post('/', verifyToken, postController.createPost); // Create a new post\n\nrouter.get('/',  postController.getAllPosts); // Get all posts\n\nrouter.get('/:id', postController.getPostById); // Get a post by ID\n\nrouter.delete('/:id', verifyToken, postController.deletePost); // Delete a post by ID\n\nrouter.put('/:id/like', verifyToken, postController.toggleLikePost); // Like a post\n\nrouter.post('/:id/comment', verifyToken, postController.addComment); // Add a comment to a post\n\nmodule.exports = router;", "action": "modified"}, {"filename": "Social Media/backend/routes/userRoutes.js", "content": "const express = require('express');\nconst router = express.Router();\nconst userController = require('../controllers/userController');\nconst { verifyToken } = require('../middlewares/authMiddleware');\n\nrouter.get('/search', verifyToken, userController.searchUsers);\nrouter.get('/profile/:id', userController.getUserProfile);\nrouter.put('/edit', verifyToken, userController.editProfile);\n\nmodule.exports = router;", "action": "modified"}, {"filename": "Social Media/backend/server.js", "content": "const express = require('express');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\nconst { createServer } = require('http');\nconst { Server } = require('socket.io');\n\nconst corsMiddleware = require('./config/cors'); // 👈 import here\n\nconst authRoutes = require('./routes/authRoutes');\nconst postRoutes = require('./routes/postRoutes');\nconst friendRoutes = require('./routes/friendRoutes');\nconst notificationRoutes = require('./routes/notificationRoutes');\nconst userRoutes = require('./routes/userRoutes');\nconst { socketHandler } = require('./socketManager');\n\ndotenv.config();\n\nconst app = express();\nconst httpServer = createServer(app);\nconst io = new Server(httpServer, {\n  cors: {\n    origin: \"http://localhost:5173\",\n    credentials: true,\n  }\n});\n\nlet ioInstance = null; // Initialize ioInstance\nsocketHandler(io);\nioInstance = io; // Assign the io instance\n\napp.use(corsMiddleware); // 👈 use configured CORS\napp.use(express.json());\n\n// API routes\napp.use('/users', userRoutes);\napp.use('/auth', authRoutes);\napp.use('/posts', postRoutes);\napp.use('/friend', friendRoutes);\napp.use('/notifications', notificationRoutes);\n\napp.get('/', (req, res) => {\n  res.send('Server is running 🚀');\n});\n\nmongoose.connect(process.env.MONGO_URL)\n  .then(() => console.log(\"MongoDB connected successfully\"))\n  .catch((err) => console.error(\"MongoDB connection failed\", err.message));\n\n// Remove the unnecessary io.on('connection') listener\n\nconst PORT = process.env.PORT || 5000;\nhttpServer.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});", "action": "modified"}, {"filename": "Social Media/backend/socketManager.js", "content": "let onlineUsers = new Map();\n\nconst socketHandler = (io)=>{  \n  io.on('connection', (socket)=>{\n    console.log('A user connected', socket.id);\n\n    socket.on('user-connected', (userId)=>{\n      onlineUsers.set(userId, socket.id)\n    })\n\n    socket.on('disconnect', ()=>{\n      for(const [key, value] of onlineUsers.entries()){\n        if(value === socket.id){\n          onlineUsers.delete(key)\n          break\n        }\n      }\n      console.log('A user disconnected', socket.id);\n    })\n\n  })\n}\n\nconst getSocketId = (userId)=>{\n  return onlineUsers.get(userId)\n}\n\nmodule.exports = { socketHandler, getSocketId };", "action": "modified"}, {"filename": "Social Media/backend/utils/createNotification.js", "content": "const Notification = require('../models/notification');\n\nconst createNotification = async ({ recipient, sender, type, post, message }) => {\n  if (recipient.toString() === sender.toString()) return;\n\n  const newNotification = new Notification({\n    recipient,\n    sender,\n    type,\n    post,\n    message,\n  });\n\n  await newNotification.save();\n};\n\nmodule.exports = createNotification;", "action": "unchanged"}, {"filename": "Social Media/front/.gitignore", "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nnode_modules\ndist\ndist-ssr\n*.local\n\n# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?", "action": "modified"}, {"filename": "Social Media/front/eslint.config.js", "content": "import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\n\nexport default [\n  { ignores: ['dist'] },\n  {\n    files: ['**/*.{js,jsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: 'latest',\n        ecmaFeatures: { jsx: true },\n        sourceType: 'module',\n      },\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      ...reactHooks.configs.recommended.rules,\n      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  },\n]", "action": "unchanged"}, {"filename": "Social Media/front/index.html", "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>", "action": "unchanged"}, {"filename": "Social Media/front/package-lock.json", "content": "<ORIGINAL_CONTENT_UNMODIFIED_PLACEHOLDER>", "action": "unchanged"}, {"filename": "Social Media/front/package.json", "content": "{\n  \"name\": \"front\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@splinetool/react-spline\": \"^4.0.0\",\n    \"@tailwindcss/vite\": \"^4.1.5\",\n    \"axios\": \"^1.9.0\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-router-dom\": \"^7.5.3\",\n    \"tailwindcss\": \"^4.1.5\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.22.0\",\n    \"@types/react\": \"^19.0.10\",\n    \"@types/react-dom\": \"^19.0.4\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"eslint\": \"^9.22.0\",\n    \"eslint-plugin-react-hooks\": \"^5.2.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^16.0.0\",\n    \"vite\": \"^6.3.1\"\n  }\n}", "action": "unchanged"}, {"filename": "Social Media/front/README.md", "content": "# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.", "action": "unchanged"}, {"filename": "Social Media/front/src/api/axios.js", "content": "// src/api/axios.js\nimport axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000', // change if your backend runs elsewhere\n  withCredentials: true, // if you're using cookies/sessions\n});\n\nexport default instance;", "action": "unchanged"}, {"filename": "Social Media/front/src/App.css", "content": "", "action": "unchanged"}, {"filename": "Social Media/front/src/App.jsx", "content": "import { BrowserRouter, Routes, Route, Link, useNavigate } from 'react-