[{"filename": "Social Media/backend/.env", "content": "PORT=5000\nMONGO_URL=mongodb+srv://guruopgsb:6wviB4ARdDLYuMd3@cluster.ah2kul8.mongodb.net/?retryWrites=true&w=majority&appName=Cluster\nJWT_SECRET=your_secret_key", "action": "unchanged"}, {"filename": "Social Media/backend/config/cors.js", "content": "const cors = require('cors');\n\nconst corsOptions = {\n  origin: \"http://localhost:5173\",\n  credentials: true,\n};\n\nmodule.exports = cors(corsOptions);", "action": "unchanged"}, {"filename": "Social Media/backend/controllers/authController.js", "content": "const User = require('../models/user');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\nexports.register = async (req, res)=>{\n  try{\n  const {username, email, password} = req.body\n\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n\n  const newUser = new User({\n    username, email, password : hashedPassword\n  })\n  await newUser.save();\n  console.log(\"REGISTER HIT\");\n  res.status(201).json({message: \"User created successfully\"})\n}catch(err){\n  res.status(500).json({message: err.message})\n}\n}\n\nexports.login = async (req, res)=>{\ntry{\n  const { emailOrUsername = \"\", password } = req.body;\n\n\n  let user;\n   if(emailOrUsername.includes('@')){\n    user = await User.findOne({email: emailOrUsername})\n   }\n   else{\n    user = await User.findOne({username: emailOrUsername})\n   }\n   if(!user){\n    return res.status(404).json({message: \"User not found\"})\n   }\n\n   const isMatch = await bcrypt.compare(password, user.password)\n   if(!isMatch){\n    return res.status(400).json({message: \"Invalid credentials\"})\n   }  \n   console.log(\"LOGIN HIT\");\n   const token = jwt.sign({id: user._id, username: user.username}, process.env.JWT_SECRET, {expiresIn: '7d'});\n   res.json({token, user});\n}catch(err){\n  res.status(500).json({message: err.message})\n}\n}", "action": "modified"}, {"filename": "Social Media/backend/controllers/friendController.js", "content": "const User = require('../models/user');\nconst { getSocketId } = require('../socketManager');\n\nexports.sendFriendRequest = async (req, res)=>{\n  try{\n    const senderId = req.user.id;\n    const receiverId = req.params.id;\n\n    if(senderId === receiverId){\n      return res.status(400).json({message: \"You cannot send a friend request to yourself\"})\n    }\n\n    const receiver = await User.findById(receiverId)\n    const sender = await User.findById(senderId)\n\n    if(!receiver){\n      return res.status(404).json({message: \"Receiver not found\"})\n    }\n    if(receiver.friendRequests.includes(senderId) || sender.friends.includes(receiverId)){\n      return res.status(400).json({message: \"Friend request already sent or you are already friends\"})\n    }\n    \n\n    receiver.friendRequests.push(senderId)\n    await receiver.save()\n\n    res.status(200).json({message: \"Friend request sent successfully\"})\n    const receiverSocket = getSocketId(receiverId)\n    if (receiverSocket) {\n      io.to(receiverSocket).emit(\"friend-request-received\", {\n        from: senderId,\n        message: \"You have a new friend request\"\n      });\n    }\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.acceptFriendRequest = async (req, res)=>{\n  try{\n    const receiverId = req.user.id;\n    const senderId = req.params.id;\n\n    const receiver = await User.findById(receiverId);\n    const sender = await User.findById(senderId)\n\n    if (!receiver.friendRequests.includes(senderId)) {\n      return res.status(400).json({ message: \"No friend request from this user\" });\n    }\n    \n\n    receiver.friendRequests = receiver.friendRequests.filter(id => id.toString() !== senderId)\n    receiver.friends.push(senderId);\n\n    sender.friends.push(receiverId)\n\n    await receiver.save()\n    await sender.save()\n\n    res.status(200).json({message: \"Friend request accepted successfully\"})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\n\nexports.rejectFriendRequest = async (req, res)=>{\n  try{\n    const receiverId = req.user.id\n    const senderId = req.params.id\n\n    const receiver = await User.findById(receiverId)\n\n    if(!receiver.friendRequests.includes(senderId)){\n      return res.status(400).json({message: \"No friend request from this user\"})\n    }\n\n    receiver.friendRequests = receiver.friendRequests.filter(id => id.toString() !== senderId)\n\n    await receiver.save()\n    res.status(200).json({message: \"Friend request rejected successfully\"})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getFriendRequests = async (req, res)=>{\n  try{\n    const user = await User.findById(req.user.id).populate('friendRequests', 'username email')\n    if(!user){\n      return res.status(404).json({message: \"User not found\"})\n    }\n    res.status(200).json(user.friendRequests)\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getFriendList = async (req, res)=>{\n  try{\n    const user = await User.findById(req.user.id).populate('friends', 'username email')\n    if(!user){\n      return res.status(404).json({message: \"User not found\"})\n    }\n    res.status(200).json(user.friends)\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}", "action": "modified"}, {"filename": "Social Media/backend/controllers/notificationController.js", "content": "const Notification = require('../models/notification');\n\nexports.getNotifications = async (req, res) => {\n  try {\n    const notifications = await Notification.find({ recipient: req.user.id })\n      .sort({ createdAt: -1 })\n      .populate('sender', 'username')\n      .populate('post', 'textContent');\n    res.status(200).json(notifications);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.markAsRead = async (req, res) => {\n  try {\n    await Notification.findByIdAndUpdate(req.params.id, { read: true });\n    res.status(200).json({ message: 'Marked as read' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};", "action": "unchanged"}, {"filename": "Social Media/backend/controllers/postController.js", "content": "const Post = require('../models/post');\n\nexports.createPost = async (req, res)=>{\n  try{\n    const {textContent, image} = req.body;\n    \n    const newPost = new Post({\n      userId : req.user.id,\n      textContent,\n      image,\n      likes:[], \n      comments:[],\n      timestamp: new Date()\n    })\n\n    await newPost.save();\n    res.status(201).json({message: \"Post created successfully\", post: newPost})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.getAllPosts = async(req, res)=>{\n\n  try{\n    const posts = await Post.find().populate(\"userId\", \"username profilePic\").sort({timestamp: -1});\n    res.status(200).json(posts);\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\n\nexports.getPostById = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Validate MongoDB ObjectId (optional but good practice)\n    if (!id.match(/^[0-9a-fA-F]{24}$/)) {\n      return res.status(400).json({ message: \"Invalid post ID format\" });\n    }\n\n    const post = await Post.findById(id).populate(\"userId\", \"username profilePic\"); // optional: include user info\n\n    if (!post) {\n      return res.status(404).json({ message: \"Post not found\" });\n    }\n\n    res.status(200).json(post);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\n\nexports.deletePost = async(req, res)=>{\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    if(post.userId.toString() !== req.user.id){\n      return res.status(403).json({message: \"You are not allowed to delete this post\"})\n    }\n    await post.deleteOne();\n    res.status(200).json({message: \"Post deleted successfully\"})\n    }catch(err){\n      res.status(500).json({message: err.message})\n    }\n}\n\nexports.toggleLikePost = async(req, res)=>{\n  const createNotification = require('../utils/createNotification');\n  const { getSocketId } = require('../socketManager');\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    if(post.likes.includes(req.user.id)){\n      post.likes = post.likes.filter(id => id.toString() !== req.user.id)\n      await post.save()\n      return res.status(200).json({message: \"Post unliked\", post})\n    }\n    else{\n      post.likes.push(req.user.id);\n      await post.save();\n      await createNotification({\n        recipient: post.userId,\n        sender: req.user.id,\n        type: 'like',\n        post: post._id,\n        message: `${req.user.username} liked your post`,\n      });\n      const postOwnerSocket = getSocketId(post.userId.toString());\n      if (postOwnerSocket && req.user.id !== post.userId.toString()) {\n        io.to(postOwnerSocket).emit(\"post-liked\", {\n          from: req.user.id,\n          postId: post._id,\n          message: \"Someone liked your post\"\n        });\n      }\n      return res.status(200).json({message: \"Post liked\", post})\n     \n    }\n\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}\n\nexports.addComment = async(req, res)=>{\n  const createNotification = require('../utils/createNotification');\n  try{\n    const post = await Post.findById(req.params.id)\n    if(!post){\n      return res.status(404).json({message: \"Post not found\"})\n    }\n    const newComment = {\n      userId: req.user.id,\n      text: req.body.text,\n      timestamp: new Date()\n    }\n    post.comments.push(newComment)\n    await post.save()\n\n    await createNotification({\n      recipient: post.userId,\n      sender: req.user.id,\n      type: 'comment',\n      post: post._id,\n      message: `${req.user.username} commented on your post`,\n    });\n    res.status(200).json({message: \"Comment added\", post})\n  }catch(err){\n    res.status(500).json({message: err.message})\n  }\n}", "action": "modified"}, {"filename": "Social Media/backend/models/notification.js", "content": "const mongoose = require('mongoose');\n\nconst notificationSchema = new mongoose.Schema({\n  recipient: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  sender: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  type: { type: String, enum: ['like', 'comment', 'friend_request'], required: true },\n  post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post' },\n  message: { type: String },\n  read: { type: Boolean, default: false },\n  createdAt: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Notification', notificationSchema);", "action": "unchanged"}, {"filename": "Social Media/backend/models/post.js", "content": "const mongoose = require('mongoose');\n\nconst postSchema = new mongoose.Schema({\n  userId:{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  textContent:{\n    type: String,\n    maxlength: 1000\n  },\n  image:{\n    type: String,\n    default: \"\",\n  },\n  likes: [{\n    type: mongoose.Schema.Types.ObjectId,\n     ref: 'User'}],\n     comments: [\n      {\n          userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n          text: { type: String },\n          timestamp: { type: Date, default: Date.now }\n      }\n  ]\n},{ \n  timestamps: true\n})\n\nmodule.exports = mongoose.model('Post', postSchema)", "action": "modified"}, {"filename": "Social Media/backend/models/user.js", "content": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username:{\n    type: String,\n    required: true,\n    unique: true,\n    maxlength:15,\n    minlength: 5\n  },\n  email:{\n    type: String,\n    required: true,\n    unique: true\n  },\n  password:{\n    type: String,\n    required: true,\n    minlength: 8\n  },\n  profilePic:{\n    type: String,\n    default: \"\"\n  },\n  bio:{\n    type: String,\n    default: \"\",\n    maxlength: 100\n  },\n  friends: [{type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n  friendRequests: [{type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n}, {timestamps: true})\n\nmodule.exports = mongoose.model('user', userSchema);", "action": "unchanged"}, {"filename": "Social Media/backend/package-lock.json", "content": "{\"name\": \"backend\", \"version\": \"1.0.0\", \"lockfileVersion\": 3, \"requires\": true, \"packages\": {\"\": {\"name\": \"backend\", \"version\": \"1.0.0\", \"license\": \"ISC\", \"dependencies\": {\"bcrypt\": \"^5.1.1\", \"bcryptjs\": \"^3.0.2\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.5.0\", \"express\": \"^5.1.0\", \"jsonwebtoken\": \"^9.0.2\", \"mongodb\": \"^6.16.0\", \"mongoose\": \"^8.14.0\", \"socket.io\": \"^4.8.1\"}, \"devDependencies\": {\"nodemon\": \"^3.1.10\"}}, \"node_modules/@mapbox/node-pre-gyp\": {\"version\": \"1.0.11\", \"resolved\": \"https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz\", \"integrity\": \"sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==\", \"license\": \"BSD-3-Clause\", \"dependencies\": {\"detect-libc\": \"^2.0.0\", \"https-proxy-agent\": \"^5.0.0\", \"make-dir\": \"^3.1.0\", \"node-fetch\": \"^2.6.7\", \"nopt\": \"^5.0.0\", \"npmlog\": \"^5.0.1\", \"rimraf\": \"^3.0.2\", \"semver\": \"^7.3.5\", \"tar\": \"^6.1.11\"}, \"bin\": {\"node-pre-gyp\": \"bin/node-pre-gyp\"}}, \"node_modules/@mongodb-js/saslprep\": {\"version\": \"1.2.2\", \"resolved\": \"https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.2.2.tgz\", \"integrity\": \"sha512-EB0O3SCSNRUFk66iRCpI+cXzIjdswfCs7F6nOC3RAGJ7xr5YhaicvsRwJ9eyzYvYRlCSDUO/c7g4yNulxKC1WA==\", \"license\": \"MIT\", \"dependencies\": {\"sparse-bitfield\": \"^3.0.3\"}}, \"node_modules/@socket.io/component-emitter\": {\"version\": \"3.1.2\", \"resolved\": \"https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz\", \"integrity\": \"sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==\", \"license\": \"MIT\"}, \"node_modules/@types/cors\": {\"version\": \"2.8.17\", \"resolved\": \"https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz\", \"integrity\": \"sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==\", \"license\": \"MIT\", \"dependencies\": {\"@types/node\": \"*\"}}, \"node_modules/@types/node\": {\"version\": \"22.15.2\", \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-22.15.2.tgz\", \"integrity\": \"sha512-uKXqKN9beGoMdBfcaTY1ecwz6ctxuJAcUlwE55938g0ZJ8lRxwAZqRz2AJ4pzpt5dHdTPMB863UZ0ESiFUcP7A==\", \"license\": \"MIT\", \"dependencies\": {\"undici-types\": \"~6.21.0\"}}, \"node_modules/@types/webidl-conversions\": {\"version\": \"7.0.3\", \"resolved\": \"https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz\", \"integrity\": \"sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA==\", \"license\": \"MIT\"}, \"node_modules/@types/whatwg-url\": {\"version\": \"11.0.5\", \"resolved\": \"https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz\", \"integrity\": \"sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==\", \"license\": \"MIT\", \"dependencies\": {\"@types/webidl-conversions\": \"*\"}}, \"node_modules/abbrev\": {\"version\": \"1.1.1\", \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz\", \"integrity\": \"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\", \"license\": \"ISC\"}, \"node_modules/accepts\": {\"version\": \"2.0.0\", \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz\", \"integrity\": \"sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==\", \"license\": \"MIT\", \"dependencies\": {\"mime-types\": \"^3.0.0\", \"negotiator\": \"^1.0.0\"}, \"engines\": {\"node\": \">= 0.6\"}}, \"node_modules/agent-base\": {\"version\": \"6.0.2\", \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz\", \"integrity\": \"sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==\", \"license\": \"MIT\", \"dependencies\": {\"debug\": \"4\"}, \"engines\": {\"node\": \">= 6.0.0\"}}, \"node_modules/ansi-regex\": {\"version\": \"5.0.1\", \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\", \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\", \"license\": \"MIT\", \"engines\": {\"node\": \">=8\"}}, \"node_modules/anymatch\": {\"version\": \"3.1.3\", \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\", \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\", \"dev\": true, \"license\": \"ISC\", \"dependencies\": {\"normalize-path\": \"^3.0.0\", \"picomatch\": \"^2.0.4\"}, \"engines\": {\"node\": \">= 8\"}}, \"node_modules/aproba\": {\"version\": \"2.0.0\", \"resolved\": \"https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz\", \"integrity\": \"sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==\", \"license\": \"ISC\"}, \"node_modules/are-we-there-yet\": {\"version\": \"2.0.0\", \"resolved\": \"https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz\", \"integrity\": \"sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==\", \"deprecated\": \"This package is no longer supported.\", \"license\": \"ISC\", \"dependencies\": {\"delegates\": \"^1.0.0\", \"readable-stream\": \"^3.6.0\"}, \"engines\": {\"node\": \">=10\"}}, \"node_modules/balanced-match\": {\"version\": \"1.0.2\", \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\", \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\", \"license\": \"MIT\"}, \"node_modules/base64id\": {\"version\": \"2.0.0\", \"resolved\": \"https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz\", \"integrity\": \"sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==\", \"license\": \"MIT\", \"engines\": {\"node\": \"^4.5.0 || >= 5.9\"}}, \"node_modules/bcrypt\": {\"version\": \"5.1.1\", \"resolved\": \"https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz\", \"integrity\": \"sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==\", \"hasInstallScript\": true, \"license\": \"MIT\", \"dependencies\": {\"@mapbox/node-pre-gyp\": \"^1.0.11\", \"node-addon-api\": \"^5.0.0\"}, \"engines\": {\"node\": \">= 10.0.0\"}}, \"node_modules/bcryptjs\": {\"version\": \"3.0.2\", \"resolved\": \"https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz\", \"integrity\": \"sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==\", \"license\": \"BSD-3-Clause\", \"bin\": {\"bcrypt\": \"bin/bcrypt\"}}, \"node_modules/binary-extensions\": {\"version\": \"2.3.0\", \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\", \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\", \"dev\": true, \"license\": \"MIT\", \"engines\": {\"node\": \">=8\"}, \"funding\": {\"url\": \"https://github.com/sponsors/sindresorhus\"}}, \"node_modules/body-parser\": {\"version\": \"2.2.0\", \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz\", \"integrity\": \"sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==\", \"license\": \"MIT\", \"dependencies\": {\"bytes\": \"^3.1.2\", \"content-type\": \"^1.0.5\", \"debug\": \"^4.4.0\", \"http-errors\": \"^2.0.0\", \"iconv-lite\": \"^0.6.3\", \"on-finished\": \"^2.4.1\", \"qs\": \"^6.14.0\", \"raw-body\": \"^3.0.0\", \"type-is\": \"^2.0.0\"}, \"engines\": {\"node\": \">=18\"}}, \"node_modules/brace-expansion\": {\"version\": \"1.1.11\", \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\", \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\", \"license\": \"MIT\", \"dependencies\": {\"balanced-match\": \"^1.0.0\", \"concat-map\": \"0.0.1\"}}, \"node_modules/braces\": {\"version\": \"3.0.3\", \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\", \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\", \"dev\": true, \"license\": \"MIT\", \"dependencies\": {\"fill-range\": \"^7.1.1\"}, \"engines\": {\"node\": \">=8\"}}, \"node_modules/bson\": {\"version\": \"6.10.3\", \"resolved\": \"https://registry.npmjs.org/bson/-/bson-6.10.3.tgz\", \"integrity\": \"sha512-MTxGsqgYTwfshYWTRdmZRC+M7FnG1b4y7RO7p2k3X24Wq0yv1m77Wsj0BzlPzd/IowgESfsruQCUToa7vbOpPQ==\", \"license\": \"Apache-2.0\", \"engines\": {\"node\": \">=16.20.1\"}}, \"node_modules/buffer-equal-constant-time\": {\"version\": \"1.0.1\", \"resolved\": \"https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz\", \"integrity\": \"sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==\", \"license\": \"BSD-3-Clause\"}, \"node_modules/bytes\": {\"version\": \"3.1.2\", \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz\", \"integrity\": \"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\", \"license\": \"MIT\", \"engines\": {\"node\": \">= 0.8\"}}, \"node_modules/call-bind-apply-helpers\": {\"version\": \"1.0.2\", \"resolved\": \"https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz\", \"integrity\": \"sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/Xv